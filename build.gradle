plugins {
    // id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.7.10"
    id("groovy")
    id ("com.avast.gradle.docker-compose") version "0.16.12"
}

version = "0.1"
group = "com.sgg"

repositories {
    mavenCentral()
}

dependencies {

    annotationProcessor("org.projectlombok:lombok")
    implementation ("org.mapstruct:mapstruct:1.5.5.Final")
    implementation("org.projectlombok:lombok-mapstruct-binding:0.2.0")
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")
    //testAnnotationProcessor 'org.projectlombok:lombok'
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")

    //testCompileOnly 'org.projectlombok:lombok'
    compileOnly("org.projectlombok:lombok")

    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    //implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micronaut.reactor:micronaut-reactor-http-client")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation('org.springframework.security:spring-security-crypto:6.0.3')
    //implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("jakarta.annotation:jakarta.annotation-api")
    runtimeOnly("ch.qos.logback:logback-classic")
    //compileOnly("org.graalvm.nativeimage:svm")

    implementation("io.micronaut:micronaut-validation")

    // added
    implementation("io.micronaut.aws:micronaut-aws-apigateway")
    implementation 'io.micronaut.aws:micronaut-function-aws-api-proxy'

    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")

    compileOnly("com.google.code.findbugs:jsr305") // https://github.com/micronaut-projects/micronaut-core/issues/5323

    testImplementation("ch.qos.logback:logback-classic")
    testImplementation 'io.micronaut:micronaut-inject-groovy'
    testImplementation "io.micronaut.test:micronaut-test-spock"
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }

    if (System.getenv("MICRONAUT_ENVIRONMENTS")?.contains("dev")) {
        runtimeOnly("mysql:mysql-connector-java")
    } else {
        runtimeOnly("com.h2database:h2")
    }

}

application {
    mainClass.set("com.sgg.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("spock2")
    processing {
        incremental(true)
        annotations("example.micronaut.*")
    }
}

// TODO: remove this?
tasks.register('buildZip', Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}

sourceSets {
    testIntegration {
        groovy.srcDir "src/testIntegration/groovy"
        resources.srcDir "src/testIntegration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    testIntegrationImplementation.extendsFrom testImplementation
    testIntegrationRuntime.extendsFrom testRuntime
}

dependencies {
    testIntegrationImplementation("mysql:mysql-connector-java")
}

rootProject.tasks.named("processTestIntegrationResources") {
    duplicatesStrategy = 'include'
}

tasks.register('testIntegration', Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    getEnvironment().put("MICRONAUT_ENVIRONMENTS", "integ")

    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
    shouldRunAfter test

    testLogging {
        events "passed"
    }
}

dockerCompose {
    dockerCompose.useComposeFiles = ['docker-compose-integ.yml']
}

dockerCompose.isRequiredBy(tasks.named('testIntegration'))

check.dependsOn testIntegration
